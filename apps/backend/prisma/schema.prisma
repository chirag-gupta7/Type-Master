generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  username  String?  @unique
  password  String?
  image     String?
  emailVerified DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  testResults         TestResult[]
  lessonProgress      UserLessonProgress[]
  achievements        UserAchievement[]
  gameScores          GameScore[]
  accounts            Account[]
  sessions            Session[]
  typingMistakes      TypingMistake[]
  weakKeys            UserWeakKeys[]
  skillAssessments    UserSkillAssessment[]

  @@index([email])
  @@index([username])
  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model TestResult {
  id        String   @id @default(uuid())
  userId    String
  wpm       Float
  accuracy  Float
  rawWpm    Float
  errors    Int
  duration  Int // in seconds (30, 60, or 180)
  mode      TestMode @default(WORDS)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@map("test_results")
}

enum TestMode {
  WORDS
  TIME
  QUOTE
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ExerciseType {
  KEYS          // Practice specific keys
  WORDS         // Type words
  SENTENCES     // Type sentences
  PARAGRAPHS    // Type paragraphs
  CODE          // Code snippets
}

model Lesson {
  id              String   @id @default(uuid())
  level           Int      // 1, 2, 3, etc.
  title           String   // "Home Row - ASDF"
  description     String
  keys            String[] // ["a", "s", "d", "f"]
  difficulty      Difficulty @default(BEGINNER)
  targetWpm       Int      @default(20)
  minAccuracy     Int      @default(90) // Minimum accuracy to pass
  order           Int      // Display order
  exerciseType    ExerciseType @default(KEYS)
  content         String   // Exercise text or pattern
  section         Int      @default(1) // Section number (1-6)
  isCheckpoint    Boolean  @default(false) // Is this a checkpoint lesson?
  targetFingers   String[] // Fingers to practice: ["pinky-left", "ring-right", etc.]
  unlockAfter     String[] // Lesson IDs that must be completed before this one
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  userProgress    UserLessonProgress[]
  typingMistakes  TypingMistake[]

  @@index([level, order])
  @@index([section, order])
  @@map("lessons")
}

model UserLessonProgress {
  id          String   @id @default(uuid())
  userId      String
  lessonId    String
  completed   Boolean  @default(false)
  bestWpm     Float    @default(0)
  bestAccuracy Float   @default(0)
  attempts    Int      @default(0)
  stars       Int      @default(0) // 0-3 stars based on performance
  lastAttempt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@map("user_lesson_progress")
}

model Achievement {
  id          String   @id @default(uuid())
  title       String
  description String
  icon        String   // Icon identifier
  requirement String   // JSON string with requirements
  points      Int      @default(10)
  createdAt   DateTime @default(now())

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@map("user_achievements")
}

enum GameType {
  WORD_BLITZ
  ACCURACY_CHALLENGE
  SPEED_RACE
}

model GameScore {
  id        String   @id @default(uuid())
  userId    String
  gameType  GameType
  score     Int
  wpm       Float?   // For speed-race
  accuracy  Float?   // For accuracy-challenge
  duration  Int?     // Duration in seconds
  metadata  String?  // JSON string for additional game-specific data
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, gameType])
  @@index([gameType, score(sort: Desc)])
  @@index([createdAt])
  @@map("game_scores")
}

// NEW MODELS FOR COMPREHENSIVE LESSON SYSTEM

model TypingMistake {
  id          String   @id @default(uuid())
  userId      String
  lessonId    String
  keyPressed  String   // What they typed
  keyExpected String   // What they should have typed
  timestamp   DateTime @default(now())
  fingerUsed  String?  // Which finger should be used
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@index([userId, keyExpected])
  @@map("typing_mistakes")
}

model UserWeakKeys {
  id          String   @id @default(uuid())
  userId      String
  keyChar     String   // The problematic key
  errorCount  Int      @default(1)
  lastError   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, keyChar])
  @@index([userId, errorCount])
  @@map("user_weak_keys")
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model UserSkillAssessment {
  id                  String      @id @default(uuid())
  userId              String
  assessmentDate      DateTime    @default(now())
  overallWpm          Float
  overallAccuracy     Float
  recommendedLevel    SkillLevel
  weakFingers         String[]    // Array of finger identifiers
  problematicKeys     String[]    // Array of key characters
  fingerWpmScores     String      // JSON string with finger-specific WPM scores
  assessmentData      String      // JSON string with detailed assessment data
  
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, assessmentDate])
  @@map("user_skill_assessments")
}
